-------------------
-- REGISTER_USER --
-------------------
CREATE OR REPLACE FUNCTION REGISTER_USER(
	new_first_name VARCHAR(30), -- Имя
	new_surname VARCHAR(30), -- Фамилия
	new_date_of_birth VARCHAR(10), -- Дата рождения
	new_phone VARCHAR(10), -- Номер телефона
	new_pass_series VARCHAR(6), -- Серия паспорта
	new_pass_number VARCHAR(8), -- Номер паспорта
	new_login VARCHAR(16), -- Логин
	new_user_password VARCHAR(16), -- Пароль
	new_patronymic VARCHAR(30) default NULL -- Отчество
)
RETURNS INT
LANGUAGE plpgsql AS $$
BEGIN
-- Пользователь уже зарегистрирован
	IF EXISTS(
		SELECT * FROM public.USERS
		WHERE first_name = new_first_name AND
		surname = new_surname AND
		pass_series = new_pass_series AND
		pass_number = new_pass_number
	) THEN
		RETURN 1;
	END IF;
-- Логин занят
	IF EXISTS(
		SELECT * FROM public.AUTH
		WHERE login = new_login
	) THEN
		RETURN 2;
	END IF;
-- Пользователь не зарегистрирован и логин свободен
	INSERT INTO public.USERS(
	first_name, surname, patronymic, date_of_birth, phone, pass_series, pass_number)
	VALUES (new_first_name, new_surname, new_patronymic, new_date_of_birth, new_phone, new_pass_series, new_pass_number);
	INSERT INTO public.AUTH(
	user_id, login, user_password)
	SELECT id as new_user_id, new_login, new_user_password
	FROM public.USERS
	WHERE first_name = new_first_name AND
		surname = new_surname AND
		pass_series = new_pass_series AND
		pass_number = new_pass_number;
	RETURN 0;
END;
$$;

--------------------------
-- FIND_USER_WITH_LOGIN --
--------------------------
CREATE OR REPLACE FUNCTION FIND_USER_WITH_LOGIN(
	input_login VARCHAR(16) -- Логин
)
RETURNS TABLE(
	login VARCHAR(16), -- Логин
	first_name VARCHAR(30), -- Имя
	surname VARCHAR(30), -- Фамилия
	patronymic VARCHAR(30), -- Отчество
	date_of_birth VARCHAR(10), -- Дата рождения
	phone VARCHAR(10), -- Номер телефона
	pass_series VARCHAR(6), -- Серия паспорта
	pass_number VARCHAR(8), -- Номер паспорта
	user_id INT
)
LANGUAGE plpgsql AS $$
BEGIN
	RETURN QUERY
	SELECT public.AUTH.login, public.USERS.first_name, public.USERS.surname,
		public.USERS.patronymic, public.USERS.date_of_birth, public.USERS.phone,
		public.USERS.pass_series, public.USERS.pass_number, public.USERS.id
	FROM public.USERS 
	JOIN public.AUTH ON public.USERS.id = public.AUTH.user_id
	WHERE public.AUTH.login = input_login;
	
END;
$$;

----------------------------------
-- FIND_USER_WITH_PERSONAL_DATA --
----------------------------------
CREATE OR REPLACE FUNCTION FIND_USER_WITH_PERSONAL_DATA(
	input_first_name VARCHAR(30), -- Имя
	input_surname VARCHAR(30), -- Фамилия
	input_pass_series VARCHAR(6), -- Серия паспорта
	input_pass_number VARCHAR(8) -- Номер паспорта
)
RETURNS TABLE(
	login VARCHAR(16), -- Логин
	first_name VARCHAR(30), -- Имя
	surname VARCHAR(30), -- Фамилия
	patronymic VARCHAR(30), -- Отчество
	date_of_birth VARCHAR(10), -- Дата рождения
	phone VARCHAR(10), -- Номер телефона
	pass_series VARCHAR(6), -- Серия паспорта
	pass_number VARCHAR(8) -- Номер паспорта
)
LANGUAGE plpgsql AS $$
BEGIN
	RETURN QUERY
	SELECT public.AUTH.login, public.USERS.first_name, public.USERS.surname,
		public.USERS.patronymic, public.USERS.date_of_birth, public.USERS.phone,
		public.USERS.pass_series, public.USERS.pass_number
	FROM public.USERS 
	JOIN public.AUTH ON public.USERS.id = public.AUTH.user_id
	WHERE public.USERS.first_name = input_first_name AND
	public.USERS.surname = input_surname AND
	public.USERS.pass_series = input_pass_series AND
	public.USERS.pass_number = input_pass_number;
END;
$$;

------------------
-- CHANGE LOGIN --
------------------
CREATE OR REPLACE FUNCTION CHANGE_LOGIN(
	input_login VARCHAR(16),
	new_login VARCHAR(16)
)
RETURNS INT
LANGUAGE plpgsql AS $$
BEGIN
	-- Логины совпадают
	IF input_login = new_login THEN
		RETURN 1;
	END IF;
	-- Логин занят
	IF EXISTS(
		SELECT * FROM public.AUTH
		WHERE login = new_login
	) THEN
		RETURN 2;
	END IF;
	-- Неверный логин
	IF NOT EXISTS(
		SELECT * FROM public.AUTH
		WHERE login = input_login
	) THEN
		RETURN 3;
	END IF;
	-- Логин свободен и не совпадает
	UPDATE public.AUTH
	SET login = new_login
	WHERE login = input_login;
	RETURN 0;
END;
$$;

---------------------
-- CHANGE_PASSWORD --
---------------------
CREATE OR REPLACE FUNCTION CHANGE_PASSWORD(
	input_login VARCHAR(16),
	new_password VARCHAR(16)
)
RETURNS INT
LANGUAGE plpgsql AS $$
BEGIN
	-- Пароли совпадают
	IF EXISTS(
		SELECT * FROM public.AUTH
		WHERE login = input_login AND
		user_password = new_password
	) THEN
		RETURN 1;
	END IF;
	-- Неверный логин
	IF NOT EXISTS(
		SELECT * FROM public.AUTH
		WHERE login = input_login
	) THEN
		RETURN 2;
	END IF;
	-- Пароль новый
	UPDATE public.AUTH
	SET user_password = new_password
	WHERE login = input_login;
	RETURN 0;
END;
$$;

------------------
-- GET_PASSWORD --
------------------
CREATE OR REPLACE FUNCTION GET_PASSWORD(
	input_login VARCHAR(16)
)
RETURNS VARCHAR(16)
LANGUAGE plpgsql AS $$
BEGIN
	-- Неверный логин
	IF NOT EXISTS(
		SELECT * FROM public.AUTH
		WHERE login = input_login
	) THEN
		RETURN 'ERR';
	END IF;
	-- 
	RETURN user_password FROM public.AUTH
	WHERE login = input_login;
END;
$$;

-----------------
-- CREATE_BILL --
-----------------
CREATE OR REPLACE FUNCTION CREATE_BILL(
	input_bill_number VARCHAR(20), -- Номер счёта
	input_user_id INT, -- ID пользователя
	input_currency VARCHAR(3), -- Валюта
	input_balance INT, -- Баланс
	input_bill_type VARCHAR(10) -- Тип счёта
)
RETURNS INT
LANGUAGE plpgsql AS $$
BEGIN
	IF EXISTS(
		SELECT * FROM public.BILLS
		WHERE bill_number = input_bill_number
	)THEN
		RETURN 1;
	END IF;
	
	INSERT INTO public.BILLS(bill_number, user_id, currency, balance, bill_type)
	SELECT input_bill_number, input_user_id, CURRENCY_TYPES.id, input_balance, BILL_TYPES.id
	FROM CURRENCY_TYPES, BILL_TYPES
	WHERE CURRENCY_TYPES.type_name = input_currency AND
	BILL_TYPES.type_name = input_bill_type;
	RETURN 0;
END;
$$;

---------------
-- GET_BILLS --
---------------
CREATE OR REPLACE FUNCTION GET_BILLS(
	input_user_id INT -- ID пользователя
)
RETURNS TABLE(
	bill_number VARCHAR(20), -- Номер счёта
	currency VARCHAR(3), -- Валюта
	bill_type VARCHAR(10), -- Тип счёта
	balance INT -- Баланс
)
LANGUAGE plpgsql AS $$
BEGIN
	RETURN QUERY SELECT BILLS.bill_number, CURRENCY_TYPES.type_name, BILL_TYPES.type_name, BILLS.balance FROM BILLS, CURRENCY_TYPES, BILL_TYPES
	WHERE user_id = input_user_id AND
	BILL_TYPES.id = BILLS.bill_type AND
	CURRENCY_TYPES.id =  BILLS.currency;
END;
$$;

------------------
-- DO_OPERATION --
------------------
CREATE OR REPLACE FUNCTION DO_OPERATION(
	input_bill_from VARCHAR(20),
	input_bill_to VARCHAR(20),
	input_amount INT
)
RETURNS INT
LANGUAGE plpgsql AS $$
DECLARE currency_id INT;
BEGIN
	IF (SELECT COUNT(*) FROM BILLS
	WHERE bill_number = input_bill_from OR
	bill_number = input_bill_to) != 2 THEN 
		RETURN 1;
	END IF;
	
	currency_id := currency FROM BILLS
	WHERE bill_number = input_bill_from;
	
	IF (SELECT COUNT(*) FROM BILLS
	WHERE bill_number = input_bill_from OR
	bill_number = input_bill_to AND
	currency = currency_id)!= 2 THEN 
		RETURN 2;
	END IF;
	
	UPDATE BILLS
	SET balance = balance - input_amount
	WHERE bill_number = input_bill_from;
	
	INSERT INTO BILLS_HISTORY(user_id, move_from, move_to, amount, operation_type, operation_time)
	SELECT bills.user_id, input_bill_from, input_bill_to, input_amount, operation_types.id, CURRENT_TIMESTAMP FROM bills, operation_types
	WHERE bills.bill_number = input_bill_from AND
	operation_types.type_name = 'give';

	UPDATE BILLS
	SET balance = balance + input_amount
	WHERE bill_number = input_bill_to;
	
	INSERT INTO BILLS_HISTORY(user_id, move_from, move_to, amount, operation_type, operation_time)
	SELECT bills.user_id, input_bill_to, input_bill_from, input_amount, operation_types.id, CURRENT_TIMESTAMP FROM bills, operation_types
	WHERE bills.bill_number = input_bill_from AND
	operation_types.type_name = 'get';
	
	RETURN 0;
END;
$$;

--------------------
-- CREATE_PATTERN --
--------------------
CREATE OR REPLACE FUNCTION CREATE_PATTERN(
	input_user_id INT,
	input_pattern_name VARCHAR(20),
	input_bill_number VARCHAR(20),
	input_amount INT
)
RETURNS INT
LANGUAGE plpgsql AS $$
BEGIN
	IF EXISTS(
		SELECT * FROM public.PATTERNS
		WHERE user_id = input_user_id AND
		pattern_name = input_pattern_name
	) THEN
		RETURN 1;
	END IF;
	
	IF NOT EXISTS(
		SELECT * FROM public.BILLS
		WHERE bill_number = input_bill_number
	)THEN
		RETURN 2;
	END IF;
	
	INSERT INTO public.PATTERNS(user_id, pattern_name, bill_number, amount)
	VALUES(input_user_id, input_pattern_name, input_bill_number, input_amount);
	RETURN 0;
END;
$$;

------------------
-- GET_PATTERNS --
------------------
CREATE OR REPLACE FUNCTION GET_PATTERNS(
	input_user_id INT
)
RETURNS TABLE(
	pattern_name VARCHAR(20),
	bill_number VARCHAR(20),
	amount INT
)
LANGUAGE plpgsql AS $$
BEGIN
	RETURN QUERY SELECT public.PATTERNS.pattern_name, public.PATTERNS.bill_number, public.PATTERNS.amount FROM public.PATTERNS
	WHERE user_id = input_user_id;
END;
$$;

---------------
-- ADD_VISIT --
---------------
CREATE OR REPLACE FUNCTION ADD_VISIT(
	input_user_id INT
)
RETURNS INT
LANGUAGE plpgsql AS $$
BEGIN
	INSERT INTO public.AUTH_HISTORY(user_id, visit_time)
	VALUES(input_user_id, CURRENT_TIMESTAMP);
	RETURN 0;
END;
$$;

----------------------
-- GET_AUTH_HISTORY --
----------------------
CREATE OR REPLACE FUNCTION GET_AUTH_HISTORY(
	input_user_id INT
)
RETURNS TABLE(
 	visit_time TIMESTAMP -- Дата посещения
)
LANGUAGE plpgsql AS $$
BEGIN
	RETURN QUERY SELECT public.AUTH_HISTORY.visit_time FROM public.AUTH_HISTORY
	WHERE public.AUTH_HISTORY.user_id = input_user_id
	ORDER BY public.AUTH_HISTORY.visit_time DESC
	LIMIT 30;
END;
$$;


-----------------------
-- GET_BILLS_HISTORY --
-----------------------
CREATE OR REPLACE FUNCTION GET_BILLS_HISTORY(
	input_user_id INT
)
RETURNS TABLE(
	move_from VARCHAR(20), -- Откуда
	move_to VARCHAR(20), -- Куда
	amount INT, -- Сколько
	operation_type VARCHAR(5), -- Тип операции
	operation_time TIMESTAMP -- Время операции
)
LANGUAGE plpgsql AS $$
BEGIN
	RETURN QUERY SELECT BILLS_HISTORY.move_from, BILLS_HISTORY.move_to, BILLS_HISTORY.amount, OPERATION_TYPES.type_name, BILLS_HISTORY.operation_time FROM BILLS_HISTORY, OPERATION_TYPES
	WHERE user_id = input_user_id AND
	OPERATION_TYPES.id = BILLS_HISTORY.operation_type;
END;
$$;

