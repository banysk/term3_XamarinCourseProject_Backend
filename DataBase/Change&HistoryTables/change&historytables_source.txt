-- drop if exists
DROP TABLE IF EXISTS AUTH_HISTORY CASCADE;

CREATE TABLE AUTH_HISTORY
(id SERIAL, -- ID посещения
 user_id INT, -- ID пользователя
 visit_time DATE, -- Дата посещения
 -----
 PRIMARY KEY(id),
 FOREIGN KEY(user_id)
 	REFERENCES USERS(id)
 	ON DELETE CASCADE,
 -----
 CHECK(id IS NOT NULL),
 CHECK(user_id IS NOT NULL),
 CHECK(visit_time IS NOT NULL)
);

-- drop if exists
DROP TABLE IF EXISTS AUTH_CHANGES CASCADE;

CREATE TABLE AUTH_CHANGES
(id SERIAL, -- ID изменения
 user_id INT, -- ID пользователя
 change_from VARCHAR(16), -- Изменение из
 change_to VARCHAR(16), -- Изменение в
 change_type INT, -- Тип изменения
 -----
 PRIMARY KEY(id),
 FOREIGN KEY(user_id)
 	REFERENCES public.USERS(id),
 FOREIGN KEY(change_type)
	REFERENCES public.CHANGE_TYPES(id),
 -----
 CHECK(id IS NOT NULL),
 CHECK(user_id IS NOT NULL),
 CHECK(change_from IS NOT NULL),
 CHECK(change_to IS NOT NULL),
 CHECK(change_type IS NOT NULL)
);

-- drop if exists
DROP TABLE IF EXISTS BILLS_HISTORY CASCADE;

CREATE TABLE BILLS_HISTORY
(id SERIAL, -- ID операции
 user_id INT, -- ID пользователя
 move_from INT, -- Откуда
 move_to VARCHAR(20), -- Куда
 bill_type INT, -- Тип операции
 -----
 PRIMARY KEY(id),
 FOREIGN KEY(user_id)
 	REFERENCES public.USERS(id),
 FOREIGN KEY(move_from)
 	REFERENCES public.BILLS(id),
 FOREIGN KEY(bill_type)
 	REFERENCES public.OPERATION_TYPES(id),
 -----
 CHECK(id IS NOT NULL),
 CHECK(user_id IS NOT NULL),
 CHECK(move_from IS NOT NULL),
 CHECK(LENGTH(move_to) >= 16),
 CHECK(bill_type IS NOT NULL)
);